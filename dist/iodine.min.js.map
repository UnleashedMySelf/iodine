{"version":3,"file":"iodine.min.js","sources":["../src/iodine.js"],"sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Iodine - JavaScript Library\n|--------------------------------------------------------------------------\n|\n| This library contains a collection of useful validation rules that can\n| be used to quickly verify whether items meet certain conditions.\n|\n*/\nexport class Iodine {\n  /**\n   * Constructor.\n   *\n   */\n  constructor() {\n    this.locale = undefined;\n\n    this.messages = this._defaultMessages();\n\n    this.defaultFieldName = 'Value';\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _dateCompare(first, second, type, equals = false) {\n    if (!this.isDate(first)) return false;\n\n    if (!this.isDate(second) && !this.isInteger(second)) return false;\n\n    second = typeof second === 'number' ? second : second.getTime();\n\n    if (type === 'less' && equals) return first.getTime() <= second;\n    if (type === 'less' && !equals) return first.getTime() < second;\n    if (type === 'more' && equals) return first.getTime() >= second;\n    if (type === 'more' && !equals) return first.getTime() > second;\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _defaultMessages() {\n    return {\n      after         : `The date must be after: '[PARAM]'`,\n      afterOrEqual  : `The date must be after or equal to: '[PARAM]'`,\n      array         : `[FIELD] must be an array`,\n      before        : `The date must be before: '[PARAM]'`,\n      beforeOrEqual : `The date must be before or equal to: '[PARAM]'`,\n      boolean       : `[FIELD] must be true or false`,\n      date          : `[FIELD] must be a date`,\n      different     : `[FIELD] must be different to '[PARAM]'`,\n      endingWith    : `[FIELD] must end with '[PARAM]'`,\n      email         : `[FIELD] must be a valid email address`,\n      falsy         : `[FIELD] must be a falsy value (false, 'false', 0 or '0')`,\n      in            : `[FIELD] must be one of the following options: [PARAM]`,\n      integer       : `[FIELD] must be an integer`,\n      json          : `[FIELD] must be a parsable JSON object string`,\n      max           : `[FIELD] must be less than or equal to [PARAM]`,\n      min           : `[FIELD] must be greater than or equal to [PARAM]`,\n      maxLength     : `[FIELD] must not be greater than '[PARAM]' in character length`,\n      minLength     : `[FIELD] must not be less than '[PARAM]' character length`,\n      notIn         : `[FIELD] must not be one of the following options: [PARAM]`,\n      numeric       : `[FIELD] must be numeric`,\n      optional      : `[FIELD] is optional`,\n      regexMatch    : `[FIELD] must satisify the regular expression: [PARAM]`,\n      required      : `[FIELD] must be present`,\n      same          : `[FIELD] must be '[PARAM]'`,\n      startingWith  : `[FIELD] must start with '[PARAM]'`,\n      string        : `[FIELD] must be a string`,\n      truthy        : `[FIELD] must be a truthy value (true, 'true', 1 or '1')`,\n      url           : `[FIELD] must be a valid url`,\n      uuid          : `[FIELD] must be a valid UUID`,\n    };\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _prepare(value, rules = []) {\n    if (!rules.length) return [];\n\n    if (rules[0] === 'optional' && this.isOptional(value)) return [];\n\n    return rules.filter(rule => rule !== 'optional')\n                .map(rule => [rule, this._titleCase(rule.split(':').shift()), rule.split(':').slice(1)]);\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _titleCase(value) {\n    return `${value[0].toUpperCase()}${value.slice(1)}`;\n  }\n\n  /**\n   * Attach a custom validation rule to the library.\n   *\n   */\n  addRule(name, closure) {\n    Iodine.prototype[`is${this._titleCase(name)}`] = closure;\n  }\n\n  /**\n   * Determine whether the given value meets the given synchronous or asynchronous rules.\n   *\n   */\n  async asyncIs(value, rules = []) {\n    for (let index in rules = this._prepare(value, rules)) {\n      if (!await this[`is${rules[index][1]}`].apply(this, [value, rules[index][2].join(':')])) {\n        return await rules[index][0];\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   */\n  async asyncIsValid(value, rules = []) {\n    return await this.asyncIs(value, rules) === true;\n  }\n\n  /**\n   * Retrieve an error message for the given rule.\n   *\n   */\n  getErrorMessage(rule, args = undefined) {\n    let { param, field } = typeof args === 'object' ? args : { param: args, field: undefined };\n\n    const chunks = rule.split(':');\n\n    let key = chunks.shift();\n\n    param = param || chunks.join(':');\n\n    if (['after', 'afterOrEqual', 'before', 'beforeOrEqual'].includes(key)) {\n      param = new Date(parseInt(param)).toLocaleTimeString(this.locale, {\n        year   : 'numeric',\n        month  : 'short',\n        day    : 'numeric',\n        hour   : '2-digit',\n        minute : 'numeric',\n        hour12 : false,\n      });\n    }\n\n    let message = [null, undefined, ''].includes(param)\n      ? this.messages[key]\n      : this.messages[key].replace('[PARAM]', param);\n\n    return [null, undefined, ''].includes(field)\n      ? message.replace('[FIELD]', this.defaultFieldName)\n      : message.replace('[FIELD]', field);\n  }\n\n  /**\n   * Determine if the given date is after another given date.\n   *\n   */\n  isAfter(value, after) {\n    return this._dateCompare(value, after, 'more', false);\n  }\n\n  /**\n   * Determine if the given date is after or equal to another given date.\n   *\n   */\n  isAfterOrEqual(value, after) {\n    return this._dateCompare(value, after, 'more', true);\n  }\n\n  /**\n   * Determine if the given value is an array.\n   *\n   */\n  isArray(value) {\n    return Array.isArray(value);\n  }\n\n  /**\n   * Determine if the given date is before another given date.\n   *\n   */\n  isBefore(value, before) {\n    return this._dateCompare(value, before, 'less', false);\n  }\n\n  /**\n   * Determine if the given date is before or equal to another given date.\n   *\n   */\n  isBeforeOrEqual(value, before) {\n    return this._dateCompare(value, before, 'less', true);\n  }\n\n  /**\n   * Determine if the given value is a boolean.\n   *\n   */\n  isBoolean(value) {\n    return [true, false].includes(value);\n  }\n\n  /**\n   * Determine if the given value is a date object.\n   *\n   */\n  isDate(value) {\n    return (value && Object.prototype.toString.call(value) === '[object Date]' && !isNaN(value));\n  }\n\n  /**\n   * Determine if the given value is different to another given value.\n   *\n   */\n  isDifferent(value, different) {\n    return value != different;\n  }\n\n  /**\n   * Determine if the given value ends with another given value.\n   *\n   */\n  isEndingWith(value, sub) {\n    return this.isString(value) && value.endsWith(sub);\n  }\n\n  /**\n   * Determine if the given value is a valid email address.\n   *\n   */\n  isEmail(value) {\n    return new RegExp(\"^\\\\S+@\\\\S+[\\\\.][0-9a-z]+$\").test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine if the given value is falsy.\n   *\n   */\n  isFalsy(value) {\n    return [0, '0', false, 'false'].includes(value);\n  }\n\n  /**\n   * Determine if the given value is within the given array of options.\n   *\n   */\n  isIn(value, options) {\n    return (typeof options === 'string' ? options.split(',') : options).includes(value);\n  }\n\n  /**\n   * Determine if the given value is an integer.\n   *\n   */\n  isInteger(value) {\n    return Number.isInteger(value) && parseInt(value).toString() === value.toString();\n  }\n\n  /**\n   * Determine if the given value is a JSON string.\n   *\n   */\n  isJson(value) {\n    try {\n      return typeof JSON.parse(value) === 'object';\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Determine if the given number is less than or equal to the maximum limit.\n   *\n   */\n  isMax(value, limit) {\n    return parseFloat(value) <= limit;\n  }\n\n  /**\n   * Determine if the given number is greater than or equal to the minimum limit.\n   *\n   */\n  isMin(value, limit) {\n    return parseFloat(value) >= limit;\n  }\n\n  /**\n   * Determine if the given value string length is less than or equal to the maximum limit.\n   *\n   */\n  isMaxLength(value, limit) {\n    return typeof value === 'string' ? value.length <= limit : false;\n  }\n\n  /**\n   * Determine if the given value string length is greater than or equal to the minimum limit.\n   *\n   */\n  isMinLength(value, limit) {\n    return typeof value === 'string' ? value.length >= limit : false;\n  }\n\n  /**\n   * Determine if the given value is not within the given array of options.\n   *\n   */\n  isNotIn(value, options) {\n    return !this.isIn(value, options);\n  }\n\n  /**\n   * Determine if the given value is numeric (an integer or a float).\n   *\n   */\n  isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n  }\n\n  /**\n   * Determine if the given value is optional.\n   *\n   */\n  isOptional(value) {\n    return [null, undefined, ''].includes(value);\n  }\n\n  /**\n   * Determine if the given value satisifies the given regular expression.\n   *\n   */\n  isRegexMatch(value, expression) {\n    return new RegExp(expression).test(String(value));\n  }\n\n  /**\n   * Determine if the given value is present.\n   *\n   */\n  isRequired(value) {\n    return !this.isOptional(value);\n  }\n\n  /**\n   * Determine if the given value is the same as another given value.\n   *\n   */\n  isSame(value, same) {\n    return value == same;\n  }\n\n  /**\n   * Determine if the given value starts with another given value.\n   *\n   */\n  isStartingWith(value, sub) {\n    return this.isString(value) && value.startsWith(sub);\n  }\n\n  /**\n   * Determine if the given value is a string.\n   *\n   */\n  isString(value) {\n    return typeof value === 'string';\n  }\n\n  /**\n   * Determine if the given value is truthy.\n   *\n   */\n  isTruthy(value) {\n    return [1, '1', true, 'true'].includes(value);\n  }\n\n  /**\n   * Determine if the given value is a valid URL.\n   *\n   */\n  isUrl(value) {\n    let regex = \"^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$\";\n\n    return new RegExp(regex).test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine if the given value is a valid UUID.\n   *\n   */\n  isUuid(value) {\n    let regex = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\";\n\n    return new RegExp(regex).test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   */\n  is(value, rules = []) {\n    for (let index in rules = this._prepare(value, rules)) {\n      if (!this[`is${rules[index][1]}`].apply(this, [value, rules[index][2].join(':')])) {\n        return rules[index][0];\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   */\n  isValid(value, rules = []) {\n    return this.is(value, rules) === true;\n  }\n\n  /**\n   * Determine whether the given dictionary of values meets the given schema.\n   *\n   */\n  isValidSchema(values = {}, schema = {}) {\n    const keys = Object.keys(schema);\n\n    if(keys.length === 0) return true;\n\n    for(let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n\n        if(!values.hasOwnProperty(key)) return false;\n\n        const value = values[key];\n        const rules = schema[key];\n\n        if (!this.isValid(value, rules)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Replace the default error messages with a new set.\n   *\n   */\n  setErrorMessages(messages) {\n    this.messages = messages;\n  }\n\n  /**\n   * Add or replace an error message.\n   *\n   */\n  setErrorMessage(key, message) {\n    this.messages[key] = message;\n  }\n\n  /**\n   * Replace the default locale with a new value.\n   *\n   */\n  setLocale(locale) {\n    this.locale = locale;\n  }\n\n  /**\n   * Replace the default field name with a new value.\n   *\n   */\n  setDefaultFieldName(fieldName) {\n    this.defaultFieldName = fieldName;\n  }\n}\n\n/**\n * Create an instance of the library.\n *\n */\nif(typeof window !== 'undefined') {\n  window.Iodine = new Iodine();\n}\n"],"names":["pact","state","value","s","_Pact","o","_settle","bind","v","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","Iodine","constructor","locale","undefined","messages","_defaultMessages","defaultFieldName","_dateCompare","first","second","type","equals","isDate","isInteger","getTime","after","afterOrEqual","array","before","beforeOrEqual","boolean","date","different","endingWith","email","falsy","in","integer","json","max","min","maxLength","minLength","notIn","numeric","optional","regexMatch","required","same","startingWith","string","truthy","url","uuid","_prepare","rules","length","isOptional","filter","rule","map","_titleCase","split","shift","slice","toUpperCase","addRule","name","closure","asyncIs","_exit","target","body","check","keys","key","push","reject","i","_cycle","thenable","_forTo","index","Promise","resolve","apply","join","_this$$apply","_await$rules$index$","_temp","_result2","asyncIsValid","_this2$asyncIs","getErrorMessage","args","param","field","chunks","includes","Date","parseInt","toLocaleTimeString","year","month","day","hour","minute","hour12","message","replace","isAfter","isAfterOrEqual","isArray","Array","isBefore","isBeforeOrEqual","isBoolean","Object","toString","call","isNaN","isDifferent","isEndingWith","sub","isString","endsWith","isEmail","RegExp","test","String","toLowerCase","isFalsy","isIn","options","Number","isJson","JSON","parse","isMax","limit","parseFloat","isMin","isMaxLength","isMinLength","isNotIn","isNumeric","isFinite","isRegexMatch","expression","isRequired","isSame","isStartingWith","startsWith","isTruthy","isUrl","isUuid","is","isValid","isValidSchema","values","schema","hasOwnProperty","setErrorMessages","setErrorMessage","setLocale","setDefaultFieldName","fieldName","window"],"mappings":"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"}