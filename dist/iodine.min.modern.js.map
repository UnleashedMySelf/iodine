{"version":3,"file":"iodine.min.modern.js","sources":["../src/iodine.js"],"sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Iodine - JavaScript Library\n|--------------------------------------------------------------------------\n|\n| This library contains a collection of useful validation rules that can\n| be used to quickly verify whether items meet certain conditions.\n|\n*/\nexport default class Iodine\n{\n    /**\n     * Constructor.\n     *\n     */\n    constructor()\n    {\n        this.locale = undefined;\n\n        this.messages = this._defaultMessages();\n\n        this.defaultFieldName = this._defaultFieldName();\n    }\n\n    /**\n     * @internal.\n     *\n     */\n    _dateCompare(first, second, type, equals = false)\n    {\n        if (! this.assertDate(first)) return false;\n\n        if (! this.assertDate(second) && ! this.assertInteger(second)) return false;\n\n        second = typeof second === 'number' ? second : second.getTime();\n\n        if (type === 'less' && equals)   return first.getTime() <= second;\n        if (type === 'less' && ! equals) return first.getTime() < second;\n        if (type === 'more' && equals)   return first.getTime() >= second;\n        if (type === 'more' && ! equals) return first.getTime() > second;\n    }\n\n    /**\n     * @internal.\n     *\n     */\n    _defaultFieldName()\n    {\n        return 'Value';\n    }\n\n    /**\n     * @internal.\n     *\n     */\n    _defaultMessages()\n    {\n        return {\n            after         : \"The date must be after: '[PARAM]'\",\n            afterOrEqual  : \"The date must be after or equal to: '[PARAM]'\",\n            array         : \"[FIELD] must be an array\",\n            before        : \"The date must be before: '[PARAM]'\",\n            beforeOrEqual : \"The date must be before or equal to: '[PARAM]'\",\n            boolean       : \"[FIELD] must be true or false\",\n            date          : \"[FIELD] must be a date\",\n            different     : \"[FIELD] must be different to '[PARAM]'\",\n            endsWith      : \"[FIELD] must end with '[PARAM]'\",\n            email         : \"[FIELD] must be a valid email address\",\n            falsy         : \"[FIELD] must be a falsy value (false, 'false', 0 or '0')\",\n            in            : \"[FIELD] must be one of the following options: [PARAM]\",\n            integer       : \"[FIELD] must be an integer\",\n            json          : \"[FIELD] must be a parsable JSON object string\",\n            max           : \"[FIELD] must be less than or equal to [PARAM]\",\n            min           : \"[FIELD] must be greater than or equal to [PARAM]\",\n            maxLength     : \"[FIELD] must not be greater than '[PARAM]' in character length\",\n            minLength     : \"[FIELD] must not be less than '[PARAM]' character length\",\n            notIn         : \"[FIELD] must not be one of the following options: [PARAM]\",\n            numeric       : \"[FIELD] must be numeric\",\n            optional      : \"[FIELD] is optional\",\n            regexMatch    : \"[FIELD] must satisify the regular expression: [PARAM]\",\n            required      : \"[FIELD] must be present\",\n            same          : \"[FIELD] must be '[PARAM]'\",\n            startsWith    : \"[FIELD] must start with '[PARAM]'\",\n            string        : \"[FIELD] must be a string\",\n            truthy        : \"[FIELD] must be a truthy value (true, 'true', 1 or '1')\",\n            url           : \"[FIELD] must be a valid url\",\n            uuid          : \"[FIELD] must be a valid UUID\",\n        };\n    }\n\n    /**\n     * @internal.\n     *\n     */\n    _prepare(value, rules = [])\n    {\n        if (! rules.length) return [];\n\n        if (rules[0] === 'optional' && this.assertOptional(value)) return [];\n\n        return rules.filter(rule => rule !== 'optional')\n                    .map(rule => [rule, this._titleCase(rule.split(':').shift()), rule.split(':').slice(1)]);\n    }\n\n    /**\n     * @internal.\n     *\n     */\n    _titleCase(value)\n    {\n        return `${value[0].toUpperCase()}${value.slice(1)}`;\n    }\n\n    /**\n     * Attach a custom validation rule to the library.\n     *\n     */\n    addRule(name, closure)\n    {\n        Iodine.prototype[`assert${this._titleCase(name)}`] = closure;\n    }\n\n    /**\n     * Determine if the given date is after another given date.\n     *\n     */\n    assertAfter(value, after)\n    {\n        return this._dateCompare(value, after, 'more', false);\n    }\n\n    /**\n     * Determine if the given date is after or equal to another given date.\n     *\n     */\n    assertAfterOrEqual(value, after)\n    {\n        return this._dateCompare(value, after, 'more', true);\n    }\n\n    /**\n     * Determine if the given value is an array.\n     *\n     */\n    assertArray(value)\n    {\n        return Array.isArray(value);\n    }\n\n    /**\n     * Determine if the given date is before another given date.\n     *\n     */\n    assertBefore(value, before)\n    {\n        return this._dateCompare(value, before, 'less', false);\n    }\n\n    /**\n     * Determine if the given date is before or equal to another given date.\n     *\n     */\n    assertBeforeOrEqual(value, before)\n    {\n        return this._dateCompare(value, before, 'less', true);\n    }\n\n    /**\n     * Determine if the given value is a boolean.\n     *\n     */\n    assertBoolean(value)\n    {\n        return [true, false].includes(value);\n    }\n\n    /**\n     * Determine if the given value is a date object.\n     *\n     */\n    assertDate(value)\n    {\n        return (value && Object.prototype.toString.call(value) === '[object Date]' && ! isNaN(value));\n    }\n\n    /**\n     * Determine if the given value is different to another given value.\n     *\n     */\n    assertDifferent(value, different)\n    {\n        return value != different;\n    }\n\n    /**\n     * Determine if the given value ends with another given value.\n     *\n     */\n    assertEndsWith(value, sub)\n    {\n        return this.assertString(value) && value.endsWith(sub);\n    }\n\n    /**\n     * Determine if the given value is a valid email address.\n     *\n     */\n    assertEmail(value)\n    {\n        return new RegExp(\"^[a-zA-Z0-9.!#$%&'+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)$\").test(String(value).toLowerCase());\n    }\n\n    /**\n     * Determine if the given value is falsy.\n     *\n     */\n    assertFalsy(value)\n    {\n        return [0, '0', false, 'false'].includes(value);\n    }\n\n    /**\n     * Determine if the given value is within the given array of options.\n     *\n     */\n    assertIn(value, options)\n    {\n        return (typeof options === 'string' ? options.split(',') : options).includes(value);\n    }\n\n    /**\n     * Determine if the given value is an integer.\n     *\n     */\n    assertInteger(value)\n    {\n        return Number.isInteger(value) && parseInt(value).toString() === value.toString();\n    }\n\n    /**\n     * Determine if the given value is a JSON string.\n     *\n     */\n    assertJson(value)\n    {\n        try {\n            return typeof JSON.parse(value) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Determine if the given number is less than or equal to the maximum limit.\n     *\n     */\n    assertMax(value, limit)\n    {\n        return parseFloat(value) <= limit;\n    }\n\n    /**\n     * Determine if the given number is greater than or equal to the minimum limit.\n     *\n     */\n    assertMin(value, limit)\n    {\n        return parseFloat(value) >= limit;\n    }\n\n    /**\n     * Determine if the given value string length is less than or equal to the maximum limit.\n     *\n     */\n    assertMaxLength(value, limit)\n    {\n        return typeof value === 'string' ? value.length <= limit : false;\n    }\n\n    /**\n     * Determine if the given value string length is greater than or equal to the minimum limit.\n     *\n     */\n    assertMinLength(value, limit)\n    {\n        return typeof value === 'string' ? value.length >= limit : false;\n    }\n\n    /**\n     * Determine if the given value is not within the given array of options.\n     *\n     */\n    assertNotIn(value, options)\n    {\n        return ! this.assertIn(value, options);\n    }\n\n    /**\n     * Determine if the given value is numeric (an integer or a float).\n     *\n     */\n    assertNumeric(value)\n    {\n        return ! isNaN(parseFloat(value)) && isFinite(value);\n    }\n\n    /**\n     * Determine if the given value is optional.\n     *\n     */\n    assertOptional(value)\n    {\n        return [null, undefined, ''].includes(value);\n    }\n\n    /**\n     * Determine if the given value satisifies the given regular expression.\n     *\n     */\n    assertRegexMatch(value, expression)\n    {\n        return new RegExp(expression).test(String(value));\n    }\n\n    /**\n     * Determine if the given value is present.\n     *\n     */\n    assertRequired(value)\n    {\n        return ! this.assertOptional(value);\n    }\n\n    /**\n     * Determine if the given value is the same as another given value.\n     *\n     */\n    assertSame(value, same)\n    {\n        return value == same;\n    }\n\n    /**\n     * Determine if the given value starts with another given value.\n     *\n     */\n    assertStartsWith(value, sub)\n    {\n        return this.assertString(value) && value.startsWith(sub);\n    }\n\n    /**\n     * Determine if the given value is a string.\n     *\n     */\n    assertString(value)\n    {\n        return typeof value === 'string';\n    }\n\n    /**\n     * Determine if the given value is truthy.\n     *\n     */\n    assertTruthy(value)\n    {\n        return [1, '1', true, 'true'].includes(value);\n    }\n\n    /**\n     * Determine if the given value is a valid URL.\n     *\n     */\n    assertUrl(value)\n    {\n        let regex = \"^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$\";\n\n        return new RegExp(regex).test(String(value).toLowerCase());\n    }\n\n    /**\n     * Determine if the given value is a valid UUID.\n     *\n     */\n    assertUuid(value)\n    {\n        let regex = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\";\n\n        return new RegExp(regex).test(String(value).toLowerCase());\n    }\n\n    /**\n     * Retrieve an error message for the given rule.\n     *\n     */\n    getErrorMessage(rule, args = undefined)\n    {\n        let { param, field } = typeof args === 'object' ? args : { param : args, field : undefined };\n\n        const chunks = rule.split(':');\n\n        let key = chunks.shift();\n\n        param = param || chunks.join(':');\n\n        if (['after', 'afterOrEqual', 'before', 'beforeOrEqual'].includes(key)) {\n            param = new Date(parseInt(param)).toLocaleTimeString(this.locale, {\n                year   : 'numeric',\n                month  : 'short',\n                day    : 'numeric',\n                hour   : '2-digit',\n                minute : 'numeric',\n                hour12 : false,\n            });\n        }\n\n        let message = [null, undefined, ''].includes(param)\n            ? this.messages[key]\n            : this.messages[key].replace('[PARAM]', param);\n\n        return [null, undefined, ''].includes(field)\n            ? message.replace('[FIELD]', this.defaultFieldName)\n            : message.replace('[FIELD]', field);\n    }\n\n    /**\n     * Determine whether the given values meet the given schema rules.\n     *\n     */\n    passes(values, schema)\n    {\n        return this.validate(values, schema) === true;\n    }\n\n    /**\n     * Determine whether the given value meets the given asynchronous schema rules.\n     *\n     */\n    async passesAsync(values, schema)\n    {\n        return await this.validateAsync(values, schema) === true;\n    }\n\n    /**\n     * Replace the default error messages with a new set.\n     *\n     */\n    setErrorMessages(messages)\n    {\n        this.messages = messages;\n    }\n\n    /**\n     * Add or replace an error message.\n     *\n     */\n    setErrorMessage(key, message)\n    {\n        this.messages[key] = message;\n    }\n\n    /**\n     * Replace the default locale with a new value.\n     *\n     */\n    setLocale(locale)\n    {\n        this.locale = locale;\n    }\n\n    /**\n     * Replace the default field name with a new value.\n     *\n     */\n    setDefaultFieldName(fieldName)\n    {\n        this.defaultFieldName = fieldName;\n    }\n\n    /**\n     * Determine whether the given value meets the given rules.\n     *\n     */\n    validate(value, rules)\n    {\n        for (let index in rules = this._prepare(value, rules)) {\n            if (! this[`assert${rules[index][1]}`].apply(this, [value, rules[index][2].join(':')])) {\n                return rules[index][0];\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Determine whether the given value meets the given synchronous or asynchronous rules.\n     *\n     */\n    async validateAsync(value, rules)\n    {\n        for (let index in rules = this._prepare(value, rules)) {\n            if (! await this[`assert${rules[index][1]}`].apply(this, [value, rules[index][2].join(':')])) {\n                return await rules[index][0];\n            }\n        }\n\n        return true;\n    }\n}\n\n/**\n * Create an instance of the library.\n *\n */\nif (typeof window !== 'undefined') {\n    window.Iodine = new Iodine();\n}\n"],"names":["Iodine","constructor","this","locale","undefined","messages","_defaultMessages","defaultFieldName","_defaultFieldName","_dateCompare","first","second","type","equals","assertDate","assertInteger","getTime","after","afterOrEqual","array","before","beforeOrEqual","boolean","date","different","endsWith","email","falsy","in","integer","json","max","min","maxLength","minLength","notIn","numeric","optional","regexMatch","required","same","startsWith","string","truthy","url","uuid","_prepare","value","rules","length","assertOptional","filter","rule","map","_titleCase","split","shift","slice","toUpperCase","addRule","name","closure","prototype","assertAfter","assertAfterOrEqual","assertArray","Array","isArray","assertBefore","assertBeforeOrEqual","assertBoolean","includes","Object","toString","call","isNaN","assertDifferent","assertEndsWith","sub","assertString","assertEmail","test","String","toLowerCase","assertFalsy","assertIn","options","Number","isInteger","parseInt","assertJson","JSON","parse","e","assertMax","limit","parseFloat","assertMin","assertMaxLength","assertMinLength","assertNotIn","assertNumeric","isFinite","assertRegexMatch","expression","assertRequired","assertSame","assertStartsWith","assertTruthy","assertUrl","RegExp","assertUuid","getErrorMessage","args","param","field","chunks","key","join","Date","toLocaleTimeString","year","month","day","hour","minute","hour12","message","replace","passes","values","schema","validate","async","validateAsync","setErrorMessages","setErrorMessage","setLocale","setDefaultFieldName","fieldName","index","apply","window"],"mappings":"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"}