{"version":3,"file":"iodine.min.modern.js","sources":["../src/iodine.js"],"sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Iodine - JavaScript Library\n|--------------------------------------------------------------------------\n|\n| This library contains a collection of useful validation rules that can\n| be used to quickly verify whether items meet certain conditions.\n|\n*/\nexport class Iodine {\n  /**\n   * Constructor.\n   *\n   */\n  constructor() {\n    this.locale = undefined;\n\n    this.messages = this._defaultMessages();\n\n    this.defaultFieldName = 'Value';\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _dateCompare(first, second, type, equals = false) {\n    if (!this.isDate(first)) return false;\n\n    if (!this.isDate(second) && !this.isInteger(second)) return false;\n\n    second = typeof second === 'number' ? second : second.getTime();\n\n    if (type === 'less' && equals) return first.getTime() <= second;\n    if (type === 'less' && !equals) return first.getTime() < second;\n    if (type === 'more' && equals) return first.getTime() >= second;\n    if (type === 'more' && !equals) return first.getTime() > second;\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _defaultMessages() {\n    return {\n      after         : `The date must be after: '[PARAM]'`,\n      afterOrEqual  : `The date must be after or equal to: '[PARAM]'`,\n      array         : `[FIELD] must be an array`,\n      before        : `The date must be before: '[PARAM]'`,\n      beforeOrEqual : `The date must be before or equal to: '[PARAM]'`,\n      boolean       : `[FIELD] must be true or false`,\n      date          : `[FIELD] must be a date`,\n      different     : `[FIELD] must be different to '[PARAM]'`,\n      endingWith    : `[FIELD] must end with '[PARAM]'`,\n      email         : `[FIELD] must be a valid email address`,\n      falsy         : `[FIELD] must be a falsy value (false, 'false', 0 or '0')`,\n      in            : `[FIELD] must be one of the following options: [PARAM]`,\n      integer       : `[FIELD] must be an integer`,\n      json          : `[FIELD] must be a parsable JSON object string`,\n      max           : `[FIELD] must be less than or equal to [PARAM]`,\n      min           : `[FIELD] must be greater than or equal to [PARAM]`,\n      maxLength     : `[FIELD] must not be greater than '[PARAM]' in character length`,\n      minLength     : `[FIELD] must not be less than '[PARAM]' character length`,\n      notIn         : `[FIELD] must not be one of the following options: [PARAM]`,\n      numeric       : `[FIELD] must be numeric`,\n      optional      : `[FIELD] is optional`,\n      regexMatch    : `[FIELD] must satisify the regular expression: [PARAM]`,\n      required      : `[FIELD] must be present`,\n      same          : `[FIELD] must be '[PARAM]'`,\n      startingWith  : `[FIELD] must start with '[PARAM]'`,\n      string        : `[FIELD] must be a string`,\n      truthy        : `[FIELD] must be a truthy value (true, 'true', 1 or '1')`,\n      url           : `[FIELD] must be a valid url`,\n      uuid          : `[FIELD] must be a valid UUID`,\n    };\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _prepare(value, rules = []) {\n    if (!rules.length) return [];\n\n    if (rules[0] === 'optional' && this.isOptional(value)) return [];\n\n    return rules.filter(rule => rule !== 'optional')\n                .map(rule => [rule, this._titleCase(rule.split(':').shift()), rule.split(':').slice(1)]);\n  }\n\n  /**\n   * @internal.\n   *\n   */\n  _titleCase(value) {\n    return `${value[0].toUpperCase()}${value.slice(1)}`;\n  }\n\n  /**\n   * Attach a custom validation rule to the library.\n   *\n   */\n  addRule(name, closure) {\n    Iodine.prototype[`is${this._titleCase(name)}`] = closure;\n  }\n\n  /**\n   * Determine whether the given value meets the given synchronous or asynchronous rules.\n   *\n   */\n  async asyncIs(value, rules = []) {\n    for (let index in rules = this._prepare(value, rules)) {\n      if (!await this[`is${rules[index][1]}`].apply(this, [value, rules[index][2].join(':')])) {\n        return await rules[index][0];\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   */\n  async asyncIsValid(value, rules = []) {\n    return await this.asyncIs(value, rules) === true;\n  }\n\n  /**\n   * Retrieve an error message for the given rule.\n   *\n   */\n  getErrorMessage(rule, args = undefined) {\n    let { param, field } = typeof args === 'object' ? args : { param: args, field: undefined };\n\n    const chunks = rule.split(':');\n\n    let key = chunks.shift();\n\n    param = param || chunks.join(':');\n\n    if (['after', 'afterOrEqual', 'before', 'beforeOrEqual'].includes(key)) {\n      param = new Date(parseInt(param)).toLocaleTimeString(this.locale, {\n        year   : 'numeric',\n        month  : 'short',\n        day    : 'numeric',\n        hour   : '2-digit',\n        minute : 'numeric',\n        hour12 : false,\n      });\n    }\n\n    let message = [null, undefined, ''].includes(param)\n      ? this.messages[key]\n      : this.messages[key].replace('[PARAM]', param);\n\n    return [null, undefined, ''].includes(field)\n      ? message.replace('[FIELD]', this.defaultFieldName)\n      : message.replace('[FIELD]', field);\n  }\n\n  /**\n   * Determine if the given date is after another given date.\n   *\n   */\n  isAfter(value, after) {\n    return this._dateCompare(value, after, 'more', false);\n  }\n\n  /**\n   * Determine if the given date is after or equal to another given date.\n   *\n   */\n  isAfterOrEqual(value, after) {\n    return this._dateCompare(value, after, 'more', true);\n  }\n\n  /**\n   * Determine if the given value is an array.\n   *\n   */\n  isArray(value) {\n    return Array.isArray(value);\n  }\n\n  /**\n   * Determine if the given date is before another given date.\n   *\n   */\n  isBefore(value, before) {\n    return this._dateCompare(value, before, 'less', false);\n  }\n\n  /**\n   * Determine if the given date is before or equal to another given date.\n   *\n   */\n  isBeforeOrEqual(value, before) {\n    return this._dateCompare(value, before, 'less', true);\n  }\n\n  /**\n   * Determine if the given value is a boolean.\n   *\n   */\n  isBoolean(value) {\n    return [true, false].includes(value);\n  }\n\n  /**\n   * Determine if the given value is a date object.\n   *\n   */\n  isDate(value) {\n    return (value && Object.prototype.toString.call(value) === '[object Date]' && !isNaN(value));\n  }\n\n  /**\n   * Determine if the given value is different to another given value.\n   *\n   */\n  isDifferent(value, different) {\n    return value != different;\n  }\n\n  /**\n   * Determine if the given value ends with another given value.\n   *\n   */\n  isEndingWith(value, sub) {\n    return this.isString(value) && value.endsWith(sub);\n  }\n\n  /**\n   * Determine if the given value is a valid email address.\n   *\n   */\n  isEmail(value) {\n    return new RegExp(\"^\\\\S+@\\\\S+[\\\\.][0-9a-z]+$\").test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine if the given value is falsy.\n   *\n   */\n  isFalsy(value) {\n    return [0, '0', false, 'false'].includes(value);\n  }\n\n  /**\n   * Determine if the given value is within the given array of options.\n   *\n   */\n  isIn(value, options) {\n    return (typeof options === 'string' ? options.split(',') : options).includes(value);\n  }\n\n  /**\n   * Determine if the given value is an integer.\n   *\n   */\n  isInteger(value) {\n    return Number.isInteger(value) && parseInt(value).toString() === value.toString();\n  }\n\n  /**\n   * Determine if the given value is a JSON string.\n   *\n   */\n  isJson(value) {\n    try {\n      return typeof JSON.parse(value) === 'object';\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Determine if the given number is less than or equal to the maximum limit.\n   *\n   */\n  isMax(value, limit) {\n    return parseFloat(value) <= limit;\n  }\n\n  /**\n   * Determine if the given number is greater than or equal to the minimum limit.\n   *\n   */\n  isMin(value, limit) {\n    return parseFloat(value) >= limit;\n  }\n\n  /**\n   * Determine if the given value string length is less than or equal to the maximum limit.\n   *\n   */\n  isMaxLength(value, limit) {\n    return typeof value === 'string' ? value.length <= limit : false;\n  }\n\n  /**\n   * Determine if the given value string length is greater than or equal to the minimum limit.\n   *\n   */\n  isMinLength(value, limit) {\n    return typeof value === 'string' ? value.length >= limit : false;\n  }\n\n  /**\n   * Determine if the given value is not within the given array of options.\n   *\n   */\n  isNotIn(value, options) {\n    return !this.isIn(value, options);\n  }\n\n  /**\n   * Determine if the given value is numeric (an integer or a float).\n   *\n   */\n  isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n  }\n\n  /**\n   * Determine if the given value is optional.\n   *\n   */\n  isOptional(value) {\n    return [null, undefined, ''].includes(value);\n  }\n\n  /**\n   * Determine if the given value satisifies the given regular expression.\n   *\n   */\n  isRegexMatch(value, expression) {\n    return new RegExp(expression).test(String(value));\n  }\n\n  /**\n   * Determine if the given value is present.\n   *\n   */\n  isRequired(value) {\n    return !this.isOptional(value);\n  }\n\n  /**\n   * Determine if the given value is the same as another given value.\n   *\n   */\n  isSame(value, same) {\n    return value == same;\n  }\n\n  /**\n   * Determine if the given value starts with another given value.\n   *\n   */\n  isStartingWith(value, sub) {\n    return this.isString(value) && value.startsWith(sub);\n  }\n\n  /**\n   * Determine if the given value is a string.\n   *\n   */\n  isString(value) {\n    return typeof value === 'string';\n  }\n\n  /**\n   * Determine if the given value is truthy.\n   *\n   */\n  isTruthy(value) {\n    return [1, '1', true, 'true'].includes(value);\n  }\n\n  /**\n   * Determine if the given value is a valid URL.\n   *\n   */\n  isUrl(value) {\n    let regex = \"^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$\";\n\n    return new RegExp(regex).test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine if the given value is a valid UUID.\n   *\n   */\n  isUuid(value) {\n    let regex = \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\";\n\n    return new RegExp(regex).test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   */\n  is(value, rules = []) {\n    for (let index in rules = this._prepare(value, rules)) {\n      if (!this[`is${rules[index][1]}`].apply(this, [value, rules[index][2].join(':')])) {\n        return rules[index][0];\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   */\n  isValid(value, rules = []) {\n    return this.is(value, rules) === true;\n  }\n\n  /**\n   * Determine whether the given dictionary of values meets the given schema.\n   *\n   */\n  isValidSchema(values = {}, schema = {}) {\n    const keys = Object.keys(schema);\n\n    if(keys.length === 0) return true;\n\n    for(let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n\n        if(!values.hasOwnProperty(key)) return false;\n\n        const value = values[key];\n        const rules = schema[key];\n\n        if (!this.isValid(value, rules)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Replace the default error messages with a new set.\n   *\n   */\n  setErrorMessages(messages) {\n    this.messages = messages;\n  }\n\n  /**\n   * Add or replace an error message.\n   *\n   */\n  setErrorMessage(key, message) {\n    this.messages[key] = message;\n  }\n\n  /**\n   * Replace the default locale with a new value.\n   *\n   */\n  setLocale(locale) {\n    this.locale = locale;\n  }\n\n  /**\n   * Replace the default field name with a new value.\n   *\n   */\n  setDefaultFieldName(fieldName) {\n    this.defaultFieldName = fieldName;\n  }\n}\n\n/**\n * Create an instance of the library.\n *\n */\nif(typeof window !== 'undefined') {\n  window.Iodine = new Iodine();\n}\n"],"names":["Iodine","constructor","this","locale","undefined","messages","_defaultMessages","defaultFieldName","_dateCompare","first","second","type","equals","isDate","isInteger","getTime","after","afterOrEqual","array","before","beforeOrEqual","boolean","date","different","endingWith","email","falsy","in","integer","json","max","min","maxLength","minLength","notIn","numeric","optional","regexMatch","required","same","startingWith","string","truthy","url","uuid","_prepare","value","rules","length","isOptional","filter","rule","map","_titleCase","split","shift","slice","toUpperCase","addRule","name","closure","prototype","async","index","apply","join","asyncIs","getErrorMessage","args","param","field","key","chunks","includes","parseInt","toLocaleTimeString","year","month","day","hour","minute","hour12","replace","message","isAfter","isAfterOrEqual","isArray","Array","isBefore","isBeforeOrEqual","isBoolean","Object","toString","call","isNaN","isDifferent","isEndingWith","sub","isString","endsWith","isEmail","RegExp","test","String","toLowerCase","isFalsy","isIn","options","Number","isJson","parse","e","isMax","limit","parseFloat","isMin","isMaxLength","isMinLength","isNotIn","isNumeric","isFinite","isRegexMatch","expression","isRequired","isSame","isStartingWith","startsWith","isTruthy","isUrl","isUuid","is","isValid","isValidSchema","values","schema","keys","i","hasOwnProperty","setErrorMessages","setErrorMessage","setLocale","setDefaultFieldName","fieldName","window"],"mappings":"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"}